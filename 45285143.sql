/*
INFS2200 Semester 2 2020 Project Script Submission

Krista Bradshaw 45285143
*/

/* Task 1.1 */
COLUMN CONSTRAINT_NAME FORMAT A20;
COLUMN TABLE_NAME FORMAT A20;
COLUMN SEARCH_CONDITION FORMAT A50;
SET LINE 100;
SELECT CONSTRAINT_NAME, TABLE_NAME, SEARCH_CONDITION FROM USER_CONSTRAINTS WHERE (TABLE_NAME = 'FILM' OR TABLE_NAME = 'ACTOR' OR TABLE_NAME = 'CATEGORY' OR TABLE_NAME = 'LANGUAGE' OR TABLE_NAME = 'FILM_ACTOR' OR TABLE_NAME = 'FILM_CATEGORY');
/* Task 1.2 */
ALTER TABLE CATEGORY ADD CONSTRAINT PK_CATEGORYID PRIMARY KEY (CATEGORY_ID);
ALTER TABLE LANGUAGE ADD CONSTRAINT PK_LANGUAGEID PRIMARY KEY;
ALTER TABLE FILM ADD CONSTRAINT UN_DESCRIPTION UNIQUE (DESCRIPTION);
ALTER TABLE ACTOR ADD CONSTRAINT CK_FNAME CHECK (FIRST_NAME IS NOT NULL);
ALTER TABLE ACTOR ADD CONSTRAINT CK_LNAME CHECK (LAST_NAME IS NOT NULL);
ALTER TABLE CATEGORY ADD CONSTRAINT CK_CATNAME CHECK (NAME IS NOT NULL);
ALTER TABLE LANGUAGE ADD CONSTRAINT CK_LANNAME CHECK (NAME IS NOT NULL);
ALTER TABLE FILM ADD CONSTRAINT CK_TITLE CHECK (TITLE IS NOT NULL);
ALTER TABLE FILM ADD CONSTRAINT CK_RELEASEYR CHECK (RELEASE_YEAR <= 2020);
ALTER TABLE FILM ADD CONSTRAINT CK_RATING CHECK (RATING IN ('G', 'PG', 'PG-13', 'R', 'NC-17'));
ALTER TABLE FILM ADD CONSTRAINT CK_SPLFEATURES CHECK (SPECIAL_FEATURES IN ('Trailers', 'Commentaries', 'Deleted Scenes', 'Behind the Scenes'));
ALTER TABLE FILM ADD CONSTRAINT FK_LANGUAGEID FOREIGN KEY (LANGUAGE_ID) REFERENCES LANGUAGE;
ALTER TABLE FILM ADD CONSTRAINT FK_ORLANGUAGEID FOREIGN KEY (ORIGINAL_LANGUAGE_ID) REFERENCES LANGUAGE (LANGUAGE_ID);
ALTER TABLE FILM_ACTOR ADD CONSTRAINT FK_ACTORID FOREIGN KEY (ACTOR_ID) REFERENCES ACTOR;
ALTER TABLE FILM_CATEGORY ADD CONSTRAINT FK_CATEGORYID FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY;

/* Task 2.1 */
CREATE SEQUENCE FILM_ID_SEQ INCREMENT BY 10 START WITH 20010;
/* Task 2.2 */
CREATE OR REPLACE TRIGGER BI_FILM_ID BEFORE INSERT ON FILM FOR EACH ROW BEGIN SELECT FILM_ID_SEQ.NEXTVAL INTO :NEW.FILM_ID FROM DUAL;END;/
/* Task 2.3 */
CREATE OR REPLACE TRIGGER BI_FILM_DESP BEFORE INSERT ON FILM FOR EACH ROW DECLARE SEQ VARCHAR2(20); LANG VARCHAR2(20); ORIGINAL_LANG VARCHAR2(20); DES VARCHAR2(255); RATE VARCHAR2(8); BEGIN SELECT COUNT(*) INTO SEQ FROM FILM WHERE RATING = :NEW.RATING; SELECT NAME INTO LANG FROM LANGUAGE WHERE LANGUAGE_ID = :NEW.LANGUAGE_ID; SELECT NAME INTO ORIGINAL_LANG FROM LANGUAGE WHERE LANGUAGE_ID = :NEW.ORIGINAL_LANGUAGE_ID; RATE := :NEW.RATING; IF :NEW.RATING IS NULL OR :NEW.LANGUAGE_ID IS NULL OR :NEW.ORIGINAL_LANGUAGE_ID IS NULL THEN DES := :NEW.DESCRIPTION; ELSE DES := :NEW.DESCRIPTION || RATE || '-' || SEQ || ':' || ' ORIGINALLY IN ' || ORIGINAL_LANG || '.' || ' RE-RELEASED IN ' || LANG || '.' ; :NEW.DESCRIPTION := DES; END IF; END;/

/* Task 3.1 */
COLUMN TITLE FORMAT A30;
SELECT FILM.TITLE, FILM.LENGTH FROM FILM, FILM_CATEGORY, CATEGORY WHERE (CATEGORY.NAME = 'Action') AND (FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID) AND (FILM.FILM_ID = FILM_CATEGORY.FILM_ID) AND (FILM.LENGTH = (SELECT MIN(FILM.LENGTH) FROM FILM));
/* Task 3.2 */
CREATE VIEW MIN_ACTION_ACTORS AS SELECT DISTINCT ACTOR.ACTOR_ID, ACTOR.FIRST_NAME, ACTOR.LAST_NAME FROM ACTOR, FILM_ACTOR WHERE (ACTOR.ACTOR_ID = FILM_ACTOR.ACTOR_ID) AND (FILM_ACTOR.FILM_ID IN (SELECT FILM.FILM_ID FROM FILM, FILM_CATEGORY, CATEGORY WHERE (CATEGORY.NAME = 'Action') AND (FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID) AND (FILM.FILM_ID = FILM_CATEGORY.FILM_ID) AND (FILM.LENGTH = (SELECT MIN(FILM.LENGTH) FROM FILM))));
COLUMN FIRST_NAME FORMAT A20;
COLUMN LAST_NAME FORMAT A20;
SELECT * FROM MIN_ACTION_ACTORS;
/* Task 3.3 */
CREATE VIEW V_ACTION_ACTORS_2012 AS SELECT DISTINCT ACTOR.ACTOR_ID, ACTOR.FIRST_NAME, ACTOR.LAST_NAME FROM ACTOR, FILM_ACTOR WHERE (ACTOR.ACTOR_ID = FILM_ACTOR.ACTOR_ID) AND (FILM_ACTOR.FILM_ID IN (SELECT FILM.FILM_ID FROM FILM, FILM_CATEGORY, CATEGORY WHERE (CATEGORY.NAME = 'Action') AND (FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID) AND (FILM.FILM_ID = FILM_CATEGORY.FILM_ID) AND (FILM.RELEASE_YEAR = 2012)));
SET TIMING ON;
SELECT * FROM V_ACTION_ACTORS_2012;
/* Task 3.4 */
CREATE MATERIALIZED VIEW MV_ACTION_ACTORS_2012 BUILD IMMEDIATE AS SELECT DISTINCT ACTOR.ACTOR_ID, ACTOR.FIRST_NAME, ACTOR.LAST_NAME FROM ACTOR, FILM_ACTOR WHERE (ACTOR.ACTOR_ID = FILM_ACTOR.ACTOR_ID) AND (FILM_ACTOR.FILM_ID IN (SELECT FILM.FILM_ID FROM FILM, FILM_CATEGORY, CATEGORY WHERE (CATEGORY.NAME = 'Action') AND (FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID) AND (FILM.FILM_ID = FILM_CATEGORY.FILM_ID) AND (FILM.RELEASE_YEAR = 2012)));
SELECT * FROM MV_ACTION_ACTORS_2012;
/* Task 3.5 */
EXPLAIN PLAN FOR SELECT * FROM V_ACTION_ACTORS_2012;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
EXPLAIN PLAN FOR SELECT * FROM MV_ACTION_ACTORS_2012;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

/* Task 4.1 */
SELECT FILM_ID, TITLE FROM FILM WHERE (INSTR(DESCRIPTION, 'Boat') > 0) ORDER BY TITLE ASC FETCH FIRST 100 ROWS ONLY;
/* Task 4.2 */
CREATE INDEX IDX_BOAT ON FILM(INSTR(DESCRIPTION, 'Boat'));
/* Task 4.3 */
-- Run before and after 4.2
EXPLAIN PLAN FOR SELECT FILM_ID, TITLE FROM FILM WHERE (INSTR(DESCRIPTION, 'Boat') > 0) ORDER BY TITLE ASC FETCH FIRST 100 ROWS ONLY;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
/* Task 4.4 */
SELECT COUNT(*) AS NUMFILMS FROM FILM A JOIN (SELECT RELEASE_YEAR, RATING, SPECIAL_FEATURES, COUNT(*) FROM FILM GROUP BY RELEASE_YEAR, RATING, SPECIAL_FEATURES HAVING COUNT(*) >= 40) B ON A.RELEASE_YEAR = B.RELEASE_YEAR AND A.RATING = B.RATING AND A.SPECIAL_FEATURES = B.SPECIAL_FEATURES ORDER BY A.RELEASE_YEAR;

/* Task 5.1 */
ANALYZE INDEX PK_FILMID VALIDATE STRUCTURE OFFLINE;
COLUMN NAME FORMAT A10;
SELECT NAME, HEIGHT FROM INDEX_STATS;
SELECT NAME, LF_BLKS FROM INDEX_STATS;
SELECT NAME, BLOCKS FROM INDEX_STATS;
/* Task 5.2 */
EXPLAIN PLAN FOR SELECT /*+RULE*/ * FROM FILM WHERE FILM_ID > 100;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
/* Task 5.3 */
EXPLAIN PLAN FOR SELECT * FROM FILM WHERE FILM_ID > 100;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
/* Task 5.4 */
ALTER SESSION SET OPTIMIZER_MODE = CHOOSE;
EXPLAIN PLAN FOR SELECT * FROM FILM WHERE FILM_ID > 19990;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);
/* Task 5.5 */
ALTER SESSION SET OPTIMIZER_MODE = CHOOSE;
EXPLAIN PLAN FOR SELECT * FROM FILM WHERE FILM_ID = 100;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);